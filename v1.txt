# GuardianGrid

## About

GuardianGrid

## Hackathon Details

This project was built for the 2nd **National Security Hackathon** which took place from April 26, 2025 9:00 AM PT (Saturday) to April 27, 2025 5:00 PM PT (Sunday) and was hosted at San Francisco's Shack15 building on the 2nd floor. The event was sponsored by Shield Capital, Gordian Knot Center, Cerebral Valley, Shack15, NIF, iqt, scale, Vannevar Labs, WindSurf, CodeMetal, Anthropic, Microsoft, Maxar, Groq, Dedrone, & Distributed Spectrum. There were also alot of supports from Stanford University as there was even a social cocktails and team building even before the hackathon at Stanford's campus one day before the hackathon.

This hackathon focused on building for defense. And each project had to fall into one of the following categories:

- Smart Cities
- War Games
- Maritime Pattern Analysis
- Cypbersecurity for AI Deployments
- Radio Frequency Navigation
- General National Security
- Hack A Refrigeration System

Only the top 3 projects/teams could win this hackathon. But the **Hack A Refrigeration System** category was exempt from this and fell into it's own challenge. It followed a more zero-some like game, meaning only one winner could be announced for this category.

For our project(s) we focused on the **Smart Cities** and **Hack A Refrigeration System** categories. This repo mainly focuses on what we submitted for the **Smart Cities** category but we did also submit for the **Hack A Regrigeration System* category but it is not included in this repo.

Our team did not win the hackathon, get 1st to 3rd place, but we did win the **Hack A Refrigeation System** category/project. Of everyone that attempted to be in this cateogry, we got the closest to cracking the challege and in doing so, winning this side quest of sorts. So we did get a honorable mention for this hackathon and won a crash prize. For the main challeges our project, this repo, did impress the judges and solved a pretty interesting problem. But due to the 24 hour time delay and us spliting our resources to tackle 2 projects at the same time, we did not have enough time to implment everything we wanted to implment into this project for the hackathon. So tech-wise it was not as impressive as it could have been which made us lose a lot of points. But we are all proud of this project and believe it can help cities when further enhanced.

## How To Run

1. Clone this repo and go into it.

2. Setup your `.env.local` file. Refer to the `env.local.example` file to learn what environment variables to get and setup in your own `.env.local` file. Please note that you will need a [MapBox API key](https://www.mapbox.com/) to handle the map UI logic as well as handle address to GPS coordinate conversation, a [TextBelt API key](https://textbelt.com/) to handle texting for demo purposes. You will also have to set a phone number for texting, for demo purposes.

3. After you create your `.env.local` file, you can start setting up all of GuardianGrid's services which consists of the following:

- **frontend**: The service that runs the app's frontend.
- **backend**: The service that runs the backend, map path finding logic, for the app.

4. To setup the **frontend** service, make sure you have [Yarn](https://classic.yarnpkg.com/en/docs/getting-started) installed and run the following command:

```bash
yarn install
```

5. To setup the **backend** service, do the following:

```bash
# go into this directory
cd ./src/backend

# setup a python environment
python3 -m venv env

# activate the python env
source env/bin/activate

# install all dependencies
pip3 install -r requirements.txt

# deactivate python env
deactivate

# go back to the project's root dir
cd -
```

6. With everything setup, the final steps is to run the app. To do this, you need two seperate terminal windows and/or tabs. We will calls these "Terminal #1" and "Termianl #2".

7. In "Terminal #1" run the following commands to start the **backend** service:

```bash
# go into the backend service dir
cd ./src/backend

# activate python environment
source env/bin/activate

# run the main run script for this service
bash ./run.sh
```

8. Now go to "Terminal #2" and run the following command to start the **frontend** service:

```bash
yarn dev
```

9. With everything running, go to the following url in your browser to start using the app: http://localhost:3000/

10. After you are done using it, close "Terminal #1" and "Termianl #2".
